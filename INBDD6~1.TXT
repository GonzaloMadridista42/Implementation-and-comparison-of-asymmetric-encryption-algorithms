# Importing the random library to generate random numbers
import random

# Importing the sys module to increase the recursion limit
import sys  # The sys module provides access to some variables used or maintained by the Python interpreter and to functions that interact strongly with the interpreter.

# importing the psutil library to measure the memory consumption that takes the RSA python code, to perform key generation, encoding and decoding of messages
import psutil

# importing the time library to measure the time that takes the RSA oython code, to perform key generation, encoding and decoding of messages
import time

# Importing the math library to calculate the size of the generated public and private El-Gamal keys
import math

# Function to measure memory usage
def get_memory_usage():
    process = psutil.Process()
    return process.memory_info().rss / 1024  # Convert to kilobytes

# Example of using the function
before_memory = get_memory_usage()

# Increase the recursion limit
sys.setrecursionlimit(10**6)

# To find gcd of two numbers
def gcd(a, b):
    if a < b:
        return gcd(b, a)
    elif a % b == 0:
        return b
    else:
        return gcd(b, a % b)

# Function to generate the public and the private keys, for encryption and decryption of messages
def gen_key(q):
    key = random.randint(1, q - 1)  # Generate a key in the range [1, q - 1]
    while gcd(q, key) != 1:
        key = random.randint(1, q - 1)  # Regenerate key until gcd(q, key) == 1
    
    # Calculate key sizes
    public_key_size = key.bit_length()
    private_key_size = q.bit_length()
    
    return key, q, public_key_size, private_key_size  # Return key, q, and key sizes as a tuple

def power(a, b, c):
    x = 1
    y = a
    while b > 0:
        if b % 2 == 0:
            x = (x * y) % c
        y = (y * y) % c
        b = b // 2  # Utilisation de la division entiÃ¨re //
    
    return x % c

# For asymmetric encryption
def encryption(msg, q, h, g):
    ct = []
    k, _, public_key_size, private_key_size = gen_key(q)
    s = power(h, k, q)
    p = power(g, k, q)
    for i in range(0, len(msg)):
        ct.append(msg[i])
    for i in range(0, len(ct)):
        ct[i] = s * ord(ct[i])

    return ct, p, s
    
# For decryption
def decryption(ct, p, key, q):
    pt = []
    h = power(p, key, q)
    for i in range(0, len(ct)):
        pt.append(chr(int(ct[i] / h)))
    return pt

# This part of the Python program that implements effectively the El-Gamal algorithm, displays the presentation of that Python program (that takes charge of the right choosing of the offered options described below, for the standard key sizes)
print("The present Python program will demonstrate the effectiveness of a right implementation of the El-Gamal asymmetric encryption and decryption algorithm. For that purpose, the implementation of that asymmetric algorithm El-Gamal uses a certain standard key sizes and standard message length determined by international organisations around the world, these standard key sizes and standard message length are the following ones:\n")

print("a: 2048 bits.")
print("b: 3072 bits.")
print("c: 4096 bits.")
print("d: 6144 bits.")
print("e: 8192 bits.")
print("f: 16384 bits.\n")

print("The standard key sizes and standard message length showed above are used by the El-Gamal asymmetric encryption and decryption algorithm for the generation and creation of the public and private keys, and for the calculations related to the encryption and decryption process, that are immense and colossal prime numbers generated randomly. However, for the purpose of the present Python program, these standard key sizes showed out above are used also for specifying the size of the message that must be first encrypted and then decrypted by this El-Gamal asymmetric encryption and decryption algorithm.\n")

print("The present Python program, in order to demonstrate the effectiveness of the right implementation of that El-Gamal asymmetric encryption and decryption algorithm, needs to know which standard key size and which standard message length will be used by the El-Gamal asymmetric encryption and decryption algorithm, taking into account that you must choose one of the following standard key sizes and standard message lengths:\n")

print("a: 2048 bits.")
print("b: 3072 bits.")
print("c: 4096 bits.")
print("d: 6144 bits.")
print("e: 8192 bits.")
print("f: 16384 bits.\n") 

print("For that purpose, please specify and choose a standard message length from the list shown above:")
user_response_standard_message_length = input("Enter your choice (a, b, c, d, e, or f): ")

if user_response_standard_message_length == "a":
    user_response_message_length = 256
elif user_response_standard_message_length == "b":
    user_response_message_length = 384
elif user_response_standard_message_length == "c":
    user_response_message_length = 512
elif user_response_standard_message_length == "d":
    user_response_message_length = 768
elif user_response_standard_message_length == "e":
    user_response_message_length = 1024
elif user_response_standard_message_length == "f":
    user_response_message_length = 2048

while user_response_standard_message_length not in {"a", "b", "c", "d", "e", "f"}:
    print("Invalid option. Please choose a valid option (a, b, c, d, e, or f).")
    user_response_standard_message_length = input("Enter your choice (a, b, c, d, e, or f): ")

print("For that purpose, please specify and choose a standard key size from the list shown above:")
user_response_standard_key_size = input("Enter your choice (a, b, c, d, e, or f): ")

if user_response_standard_key_size == "a":
    user_response_key_size = 256*8
elif user_response_standard_key_size == "b":
    user_response_key_size = 384*8
elif user_response_standard_key_size == "c":
    user_response_key_size = 512*8
elif user_response_standard_key_size == "d":
    user_response_key_size = 768*8
elif user_response_standard_key_size == "e":
    user_response_key_size = 1024*8
elif user_response_standard_key_size == "f":
    user_response_key_size = 2048*8

while user_response_standard_key_size not in {"a", "b", "c", "d", "e", "f"}:
    print("Invalid option. Please choose a valid option (a, b, c, d, e, or f).")
    user_response_standard_key_size = input("Enter your choice (a, b, c, d, e, or f): ")

# Checking the consistency between the message length and the key size
while True:
    if user_response_standard_message_length == user_response_standard_key_size:
        break
    else:
        print("Error: The selected message length must match the selected key size.")
        print("Please choose the same option (a, b, c, d, e, or f) for both message length and key size.")
        user_response_standard_message_length = input("Enter your choice for message length (a, b, c, d, e, or f): ")
        user_response_standard_key_size = input("Enter your choice for key size (a, b, c, d, e, or f): ")

if user_response_standard_message_length == "a":
    user_response_message_length = 256
elif user_response_standard_message_length == "b":
    user_response_message_length = 384
elif user_response_standard_message_length == "c":
    user_response_message_length = 512
elif user_response_standard_message_length == "d":
    user_response_message_length = 768
elif user_response_standard_message_length == "e":
    user_response_message_length = 1024
elif user_response_standard_message_length == "f":
    user_response_message_length = 2048

if user_response_standard_key_size == "a":
    user_response_key_size = 256*8
elif user_response_standard_key_size == "b":
    user_response_key_size = 384*8
elif user_response_standard_key_size == "c":
    user_response_key_size = 512*8
elif user_response_standard_key_size == "d":
    user_response_key_size = 768*8
elif user_response_standard_key_size == "e":
    user_response_key_size = 1024*8
elif user_response_standard_key_size == "f":
    user_response_key_size = 2048*8

if user_response_standard_key_size == "a":
    msg = input("Enter a message that contains maximum 256 characters, spaces included: ")
elif user_response_standard_key_size == "b":
    msg = input("Enter a message that contains maximum 384 characters, spaces included: ")
elif user_response_standard_key_size == "c":
    msg = input("Enter a message that contains maximum 512 characters, spaces included: ")
elif user_response_standard_key_size == "d":
    msg = input("Enter a message that contains maximum 768 characters, spaces included: ")
elif user_response_standard_key_size == "e":
    msg = input("Enter a message that contains maximum 1024 characters, spaces included: ")
elif user_response_standard_key_size == "f":
    msg = input("Enter a message that contains maximum 2048 characters, spaces included: ")

while len(msg) > user_response_message_length:
    print(f"The message written down has more than {user_response_message_length} characters, including spaces!")
    msg = input(f"Please write down a message that contains {user_response_message_length} characters, including spaces:")

if user_response_standard_key_size == "a":
    q=random.randint(pow(2, 900),pow(2, 2048))
elif user_response_standard_key_size == "b":
    q=random.randint(pow(2, 900),pow(2, 3072))
elif user_response_standard_key_size == "c":
    q=random.randint(pow(2, 900),pow(2, 4096))
elif user_response_standard_key_size == "d":
    q=random.randint(pow(2, 900),pow(2, 6144))
elif user_response_standard_key_size == "e":
    q=random.randint(pow(2, 900),pow(2, 8192))
elif user_response_standard_key_size == "f":
    q=random.randint(pow(2, 900),pow(2, 16384))

before_memory = get_memory_usage()
print("Generating El-Gamal keys...")
g = random.randint(2, q)
key, q, public_key_size, private_key_size = gen_key(q)
h = power(g, key, q)
print("El-Gamal keys generated successfully.")

after_memory = get_memory_usage()
memory_used = after_memory - before_memory

print("\ng used=", g)
print("g^a used=", h)

ct, p, s = encryption(msg, q, h, g)
print("g^k used= ", p)
print("g^ak used= ", s)

print("\nOriginal Message=", msg)
print("\nEncrypted Message=", ct)

pt = decryption(ct, p, key, q)
d_msg = ''.join(pt)
print("\nDecrypted Message=", d_msg)

after_memory = get_memory_usage()
memory_used = after_memory - before_memory

# Measurement of the complexity of the key generation operation
def measure_key_generation(q):
    start_memory = get_memory_usage()
    start_time = time.time()
    g = random.randint(2, q)
    key, q, public_key_size, private_key_size = gen_key(q)
    h = power(g, key, q)
    end_time = time.time()
    end_memory = get_memory_usage()
    return end_time - start_time, end_memory - start_memory

# Measurement of the complexity of the encryption operation
def measure_encryption(message, q, h, g):
    start_time = time.time()
    ct, p, s = encryption(message, q, h, g)
    end_time = time.time()
    return end_time - start_time

# Measurement of the complexity of the decryption operation
def measure_decryption(ct, p, key, q):
    start_time = time.time()
    pt = decryption(ct, p, key, q)
    end_time = time.time()
    return end_time - start_time

# Function to generate a message of a given length
def generate_message(user_response_message_length):
    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(user_response_message_length))

# Function to generate 5 messages of the same length as the provided plaintext message
def generate_test_messages(message, num_messages):
    return [generate_message(len(message)) for _ in range(num_messages)]

# Function to measure memory usage
def measure_memory_usage():
    process = psutil.Process()
    memory_usage_kb = process.memory_info().rss / 1024  # Convert to kilobytes
    if memory_usage_kb < 0.001:  # If memory usage is very low
        return 0.0000001  # Display a value very close to zero
    else:
        return memory_usage_kb

if __name__ == '__main__':
    # Code block that measures the size of clear and plain messages used for generating public and private keys, encryption and decryption of those clear and plain messages         performed by the El-Gamal algorithm, in order to well maintain the cybersecurity of the encrypted and decrypted messages generated by that El-Gamal algorithm
    # Clear messages
    clear_messages = [
    "La felicidad es un estado del alma que se alimenta de momentos de gratitud y amor. Es encontrar belleza en lo simple, apreciar lo que tenemos y ser conscientes de lo que nos rodea. En cada sonrisa, en cada beso, en cada alba, la felicidad se hace presente.",
    "In football, the best players that highten the most that sport are the players who have the best mentality and attitude, either when they play football in the pitch, either they are outside the pitch, and they always will show the best attitude and mentality to overcome all the obstacles they may encounter in real life and when playing football. Those players are also good parents.",
    "In football, players who honour the sport possess exceptional mental fortitude and a winning mindset. Whether on the field or off, they show out resilience and determination to excel and overcome challenges. Moreover, those players excel as parents, setting positive examples. They embody the true spirit of the game, inspiring other people with dedication, leadership, and passion. Their influence extends beyond the field, shaping the culture and instilling values of teamwork, perseverance, and sportsmanship.",
    "Dans le domaine mÃ©dical, les professionnels dÃ©dient leur vie au bien-Ãªtre. Dans les hÃ´pitaux, cliniques ou sur le terrain, ils font preuve de compassion et de compÃ©tence pour soigner et sauver des vies. Ces hÃ©ros inspirent confiance et espoir, guidant les patients avec empathie. Leur impact transcende les frontiÃ¨res de la maladie, apportant guÃ©rison et rÃ©confort Ã  ceux qui en ont besoin. MÃ©decins, infirmiÃ¨res et professionnels consacrent temps et Ã©nergie Ã  amÃ©liorer la vie des autres, avec un altruisme admirable et un engagement incÃ©ssant envers la sociÃ©tÃ©. Il est clair que les sociÃ©tÃ©s du monde ont besoin des professionnels de la santÃ©, donc on doit toujours valoriser et fÃ©liciter le travail qu'ils rÃ©alisent en faveur de notre santÃ©.",
    "Les dÃ©fis auxquels l'humanitÃ© est confrontÃ©e aujourd'hui sont nombreux et complexes. Du changement climatique Ã  la pauvretÃ© mondiale, en passant par les inÃ©galitÃ©s sociales et la montÃ©e du terrorisme, notre monde est confrontÃ© Ã  des problÃ¨mes urgents qui nÃ©cessitent une action immÃ©diate et accordÃ©e. Pour surmonter ces dÃ©fis, il est essentiel que nous travaillions ensemble, en tant que population mondiale, pour trouver des solutions durables. Cela nÃ©cessite un engagement ferme en faveur de la coopÃ©ration internationale, ainsi que des politiques et des actions concrÃ¨tes pour promouvoir le dÃ©veloppement durable, l'Ã©galitÃ© et la paix. En unissant nos forces et en mettant en commun nos ressources, l'humanitÃ© peut crÃ©er un avenir meilleur pour tous, oÃ¹ chaque individu a la chance de rÃ©aliser son plein potentiel et de vivre dans un monde sÃ»r, juste et prospÃ¨re. Cependant, afin que les nations du monde deviennent riches et prospÃ¨res, on doit Ã©liminer, pour de vrai, la pauvrÃ©tÃ© mondiale.",
    "Dans l'ombre de la nuit, les espions se dÃ©placent silencieusement, tissant leur toile d'intrigues et de mystÃ¨res. Leurs pas si feutrÃ©s rÃ©sonnent Ã  peine dans les rues dÃ©sertes, tandis qu'ils s'engagent dans une mission secrÃ¨te de trop d'importance. Leurs oreilles sont tendues, captant le moindre murmure, le moindre indice qui pourrait les guider vers la vÃ©ritÃ©. Leurs yeux scrutent l'obscuritÃ©, cherchant les signes d'un ennemi ou d'un danger imminent.Chaque geste est calculÃ©, chaque mouvement mesurÃ©, car la moindre erreur pourrait avoir des consÃ©quences catastrophiques. Au cÅur de la clandestinitÃ©, les agents se frayaient un chemin Ã  travers un rÃ©seau complexe de mensonges. Leurs identitÃ©s sont cachÃ©es derriÃ¨re des masques de dÃ©guisement sophistiquÃ©s, leurs intentions dissimulÃ©es derriÃ¨re des faÃ§ades impeccables. Chaque rencontre est un jeu de poker mortel, oÃ¹ la moindre faiblesse peut Ãªtre exploitÃ©e pour obtenir des informations vitales. Mais malgrÃ© les risques, ils continuent Ã  avancer, motivÃ©s par un sens du devoir inÃ©branlable et une loyautÃ© sans faille envers leur pays. Dans les couloirs des agences de renseignement, les analystes travaillent sans relÃ¢che pour dÃ©coder les messages codÃ©s, suivre les traces numÃ©riques et identifier les menaces Ã©mergentes. Leurs ordinateurs Ã©clairent la nuit, leurs doigts dansants sur les claviers alors qu'ils traquent les ennemis invisibles qui cherchent Ã  semer le chaos et la destruction.Leurs esprits sont aiguisÃ©s comme des lames, leur dÃ©termination inÃ©branlable face Ã  l'adversitÃ©, et dans l'ombre, les espions continuent leur ballet mortel, naviguant Ã  travers un monde de mensonges et de secrets, toujours prÃªts Ã  sacrifier leur vie pour la sÃ©curitÃ© de leur nation. Car dans le jeu de l'espionnage, il n'y a pas de place pour l'erreur, seulement pour la victoire ou la dÃ©faite, la vie ou la mort. Le thÃ¨me des espions est trÃ¨s populaire depuis longtemps, que des jeux vidÃ©o sur le fameux espion James Bond ont Ã©tÃ© dÃ©veloppÃ©s."
    ]

    # Measure the maximum length of the clear messages
    max_length = max(len(message) for message in clear_messages)

    # Generate El-Gamal keys using the maximum length
    _, _, public_key_size, private_key_size = gen_key(max_length * 8)

    # Loop to encrypt and decrypt clear messages
    for message in clear_messages:
        # Measure the size of the clear message
        clear_message_size_chars = len(message)
        clear_message_size_bytes = len(message.encode('utf-8'))

        # Encrypt the clear message
        encrypted_message, p, s = encryption(message, q, h, g)
        encrypted_message_size_chars = sum(len(str(char)) for char in encrypted_message)
        encrypted_message_size_bytes = sum(len(str(char).encode('utf-8')) for char in encrypted_message)
    
        # Decrypt the encrypted message
        decrypted_message = decryption(encrypted_message, p, key, q)
        decrypted_message_size_chars = len(decrypted_message)
        decrypted_message_size_bytes = len(''.join(decrypted_message).encode('utf-8'))

        # Display the results
        print("\nClear Message:")
        print(message)
        print("\nEncrypted Message:")
        print(encrypted_message)
        print("\nDecrypted Message:")
        print(''.join(decrypted_message))
        print("\nSize of the clear message (in characters):", clear_message_size_chars)
        print("Size of the clear message (in bytes):", clear_message_size_bytes*8)
        print("Size of public key:", public_key_size)
        print("Size of private key:", private_key_size)
        print("Size of the encrypted message (in characters):", encrypted_message_size_chars)
        print("Size of the encrypted message (in bytes):", encrypted_message_size_bytes*8)
        print("Size of the decrypted message (in characters):", decrypted_message_size_chars)
        print("Size of the decrypted message (in bytes):", decrypted_message_size_bytes*8)