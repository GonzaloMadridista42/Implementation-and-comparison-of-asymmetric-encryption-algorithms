if __name__ == '__main__':
    # Measure the total execution time
    start_time_total = time.time()
    
    # Measure the key generation time
    start_time_key_generation = time.time()
    g = random.randint(2, q)
    key = gen_key(q)
    h = power(g, key, q)
    end_time_key_generation = time.time()
    key_generation_time = end_time_key_generation - start_time_key_generation
    
    # Print/display the key generation time
    print("\nKey generation time: {:.6f} seconds ({:.6f} milliseconds)".format(key_generation_time, key_generation_time * 1000))
    
    # Measure the encryption time
    start_time_encryption = time.time()
    ct, p,s = encryption(msg, q, h, g)
    end_time_encryption = time.time()
    encryption_time = end_time_encryption - start_time_encryption
    
    # Print/display the encryption time
    print("\nEncryption time: {:.6f} seconds ({:.6f} milliseconds)".format(encryption_time, encryption_time * 1000))
    
    # Measure the decryption time
    start_time_decryption = time.time()
    pt = decryption(ct, p, key, q)
    d_msg = ''.join(pt)
    end_time_decryption = time.time()
    decryption_time = end_time_decryption - start_time_decryption
    
    # Print/display the decryption time
    print("\nDecryption time: {:.6f} seconds ({:.6f} milliseconds)".format(decryption_time, decryption_time * 1000))
    
    # Print/display the total execution time
    end_time_total = time.time()
    total_time = end_time_total - start_time_total
    print("\nTotal execution time: {:.6f} seconds ({:.6f} milliseconds)".format(total_time, total_time * 1000))