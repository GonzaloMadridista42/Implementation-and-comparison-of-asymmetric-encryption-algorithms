Gonzalo:

ok chatgpt, on va modifier mon code python de petit à petit. Le voici mon code python actuel : 
import random
import math
 
# A set will be the collection of prime numbers,
# where we can select random primes p and q
prime = set()
 
public_key = None
private_key = None
n = None
 
# We will run the function only once to fill the set of
# prime numbers
def primefiller():
    # Method used to fill the primes set is Sieve of
    # Eratosthenes (a method to collect prime numbers)
    seive = [True] * 256
    seive[0] = False
    seive[1] = False
    for i in range(2, 256):
        for j in range(i * 2, 256, i):
            seive[j] = False
 
    # Filling the prime numbers
    for i in range(len(seive)):
        if seive[i]:
            prime.add(i)
 
 
# Picking a random prime number and erasing that prime
# number from list because p!=q
def pickrandomprime():
    global prime
    k = random.randint(0, len(prime) - 1)
    it = iter(prime)
    for _ in range(k):
        next(it)
 
    ret = next(it)
    prime.remove(ret)
    return ret
 
 
def setkeys():
    global public_key, private_key, n
    prime1 = pickrandomprime()  # First prime number
    prime2 = pickrandomprime()  # Second prime number
 
    n = prime1 * prime2
    fi = (prime1 - 1) * (prime2 - 1)
 
    e = 2
    while True:
        if math.gcd(e, fi) == 1:
            break
        e += 1
 
    # d = (k*Φ(n) + 1) / e for some integer k
    public_key = e
 
    d = 2
    while True:
        if (d * e) % fi == 1:
            break
        d += 1
 
    private_key = d
 
 
# To encrypt the given number
def encrypt(message):
    global public_key, n
    e = public_key
    encrypted_text = 1
    while e > 0:
        encrypted_text *= message
        encrypted_text %= n
        e -= 1
    return encrypted_text
 
 
# To decrypt the given number
def decrypt(encrypted_text):
    global private_key, n
    d = private_key
    decrypted = 1
    while d > 0:
        decrypted *= encrypted_text
        decrypted %= n
        d -= 1
    return decrypted
 
 
# First converting each character to its ASCII value and
# then encoding it then decoding the number to get the
# ASCII and converting it to character
def encoder(message):
    encoded = []
    # Calling the encrypting function in encoding function
    for letter in message:
        encoded.append(encrypt(ord(letter)))
    return encoded
 
 
def decoder(encoded):
    s = ''
    # Calling the decrypting function decoding function
    for num in encoded:
        s += chr(decrypt(num))
    return s
 
 
if __name__ == '__main__':
    primefiller()
    setkeys()
    #message = "Test Message"
    # Uncomment below for manual input
    # message = input("Enter the message\n")
    # Calling the encoding function
    message = input("\nEnter the message\n")
    coded = encoder(message)
 
    print("\nInitial message:")
    print(message)
    print("\nThe generated public key:")
    print(public_key) 
    print("\nThe generated private key:")
    print(private_key) 
    print("\nThe encoded message(encrypted by public key)\n")
    print(''.join(str(p) for p in coded))
    print("\nThe decoded message(decrypted by public key)\n")
    print(''.join(str(p) for p in decoder(coded)))

ChatGPT:

Gonzalo:
Je veux maintenant que tu m'aides à implémenter le critère d'évaluation de la performance de ce code suivant :  Temps d'exécution.

ChatGPT:
Pour évaluer le temps d'exécution de votre code, vous pouvez utiliser le module time de Python. Voici comment vous pouvez le faire dans votre code :

Importez le module time au début de votre script Python.
Enveloppez les parties de votre code que vous souhaitez évaluer dans des blocs start_time = time.time() avant et end_time = time.time() après.
Calculez la différence entre end_time et start_time pour obtenir le temps d'exécution de la partie du code que vous avez mesurée.
Voici un exemple de la façon dont vous pouvez modifier votre code pour inclure le temps d'exécution :

import random
import math
import time

# Autres parties de votre code...

if __name__ == '__main__':
    primefiller()
    
    # Mesurer le temps d'exécution pour la génération des clés
    start_time_generation = time.time()
    setkeys()
    end_time_generation = time.time()
    generation_time = end_time_generation - start_time_generation
    
    # Mesurer le temps d'exécution pour l'encodage
    start_time_encoding = time.time()
    coded = encoder(message)
    end_time_encoding = time.time()
    encoding_time = end_time_encoding - start_time_encoding
    
    # Mesurer le temps d'exécution pour le décodage
    start_time_decoding = time.time()
    decoded_message = decoder(coded)
    end_time_decoding = time.time()
    decoding_time = end_time_decoding - start_time_decoding
    
    # Afficher les résultats et les temps d'exécution
    print("\nInitial message:")
    print(message)
    print("\nThe generated public key:")
    print(public_key) 
    print("\nThe generated private key:")
    print(private_key) 
    print("\nThe encoded message (encrypted by public key)\n")
    print(''.join(str(p) for p in coded))
    print("\nThe decoded message (decrypted by public key)\n")
    print(decoded_message)
    
    # Afficher les temps d'exécution
    print("\nTime taken for key generation: {:.6f} seconds".format(generation_time))
    print("Time taken for encoding: {:.6f} seconds".format(encoding_time))
    print("Time taken for decoding: {:.6f} seconds".format(decoding_time))

Assurez-vous de placer les blocs de mesure de temps autour des parties du code que vous souhaitez évaluer.

Gonzalo:

ah ok là le vois que ton code va foncitonner. Mais j'ai une question: peux-je metre ce bloc de code n'importe où dans mon code python ne c'est pas?

ChatGPT:

Oui, vous pouvez placer le bloc de code pour mesurer le temps d'exécution n'importe où dans votre script Python, tant que vous l'entourez des parties que vous souhaitez évaluer. Cependant, pour obtenir des mesures précises, il est généralement recommandé de placer les blocs de mesure de temps autour des parties significatives de votre code, telles que la génération des clés, l'encodage et le décodage des messages. Cela vous donnera une idée plus précise des performances de ces opérations spécifiques.

Veillez également à ne pas inclure d'autres opérations ou fonctions qui ne sont pas directement liées à ce que vous évaluez, car cela pourrait fausser les résultats de votre mesure de temps.

Gonzalo:
ahhh ok alors on continue avec l'implémentation du critère de l'évaluation de la performanc de mon code python pour RSA suivant :  Utilisation de la mémoire.

ChatGPT:
Pour mesurer l'utilisation de la mémoire dans votre programme Python, vous pouvez utiliser le module resource. Ce module permet d'interroger et de contrôler les ressources utilisées par un processus. Vous pouvez l'utiliser pour mesurer la quantité de mémoire utilisée avant et après l'exécution de certaines parties de votre code.

Voici un exemple simple de mesure de l'utilisation de la mémoire :

import resource

# Fonction pour mesurer l'utilisation de la mémoire
def get_memory_usage():
    return resource.getrusage(resource.RUSAGE_SELF).ru_maxrss

# Exemple d'utilisation de la fonction
before_memory = get_memory_usage()

# Votre code ici

after_memory = get_memory_usage()
memory_used = after_memory - before_memory
print("Mémoire utilisée :", memory_used, "kilobytes")
Vous pouvez placer ce code autour des parties de votre code que vous souhaitez évaluer en termes d'utilisation de la mémoire, telles que la génération des clés RSA, l'encodage et le décodage des messages, etc. Assurez-vous de comprendre comment ces mesures sont affectées par d'autres opérations ou fonctions dans votre code pour obtenir des résultats précis.

Gonzalo:
ahhh ok je dois implémenter tout ce que tu est en train de me fournir DANS LE MAIN de mes codes python!

ChatGPT:
Oui, c'est exact. Vous pouvez intégrer le code de mesure de l'utilisation de la mémoire dans la section principale de vos programmes Python (généralement dans le bloc if __name__ == '__main__':). Cela vous permettra de mesurer l'utilisation de la mémoire lors de l'exécution de votre programme dans son ensemble.

Voici comment vous pourriez intégrer le code dans votre programme principal :

if __name__ == '__main__':
    primefiller()
    setkeys()
    message = input("\nEnter the message\n")
    before_memory = get_memory_usage()  # Mesurer l'utilisation de la mémoire avant l'encodage
    coded = encoder(message)
    after_memory = get_memory_usage()   # Mesurer l'utilisation de la mémoire après l'encodage
    memory_used = after_memory - before_memory
    print("Mémoire utilisée pour l'encodage:", memory_used, "kilobytes")
    
    print("\nInitial message:")
    print(message)
    print("\nThe generated public key:")
    print(public_key) 
    print("\nThe generated private key:")
    print(private_key) 
    print("\nThe encoded message(encrypted by public key)\n")
    print(''.join(str(p) for p in coded))
    print("\nThe decoded message(decrypted by public key)\n")
    print(''.join(str(p) for p in decoder(coded)))
Assurez-vous d'adapter l'emplacement du code de mesure de la mémoire en fonction des parties spécifiques de votre programme que vous souhaitez évaluer.

Gonzalo:
ah ok merci de cette info. Ok on continue avec avec l'implémentation du critère de l'évaluation de la performanc de mon code python pour RSA suivant :  Taille des clés générées.

ChatGPT:
Pour mesurer la taille des clés générées dans votre code RSA, vous pouvez simplement afficher la longueur en bits des clés publiques et privées une fois qu'elles ont été générées. Voici comment vous pourriez le faire :

if __name__ == '__main__':
    primefiller()
    setkeys()
    
    # Calculer la taille des clés publiques et privées en bits
    public_key_size = int.bit_length(public_key)
    private_key_size = int.bit_length(private_key)
    
    print("\nInitial message:")
    print(message)
    print("\nThe generated public key (size in bits):")
    print(public_key, "(", public_key_size, "bits)")
    print("\nThe generated private key (size in bits):")
    print(private_key, "(", private_key_size, "bits)")

    # Autres parties de votre code ici...
Cela affichera la taille en bits des clés publiques et privées générées chaque fois que vous exécutez votre programme. Vous pouvez ensuite utiliser ces informations pour évaluer la taille des clés générées pour votre implémentation RSA.

Gonzalo:
ah ok merci de cette info. Ok on continue avec avec l'implémentation du critère de l'évaluation de la performanc de mon code python pour RSA suivant : Complexité algorithmique.

ChatGPT:
La complexité algorithmique de votre implémentation RSA dépend principalement des opérations de génération de clés, de chiffrement et de déchiffrement. Voici comment vous pourriez évaluer la complexité algorithmique de ces parties de votre code :

Complexité de la génération de clés (setkeys) :

La génération de clés dans votre code implique de choisir deux nombres premiers aléatoires et de calculer les clés publique et privée.
La complexité de cette opération dépend principalement du temps nécessaire pour trouver deux nombres premiers de grande taille et pour calculer les clés publique et privée en fonction de ces nombres.
Vous pouvez évaluer cette complexité en mesurant le temps d'exécution de la fonction setkeys() pour différentes tailles de clés.
Complexité du chiffrement (encrypt) :

Le chiffrement dans votre code implique de calculer la puissance modulaire d'un nombre (le message) avec la clé publique.
La complexité de cette opération dépend principalement de la taille du message et de la taille de la clé publique.
Vous pouvez évaluer cette complexité en mesurant le temps d'exécution de la fonction encrypt() pour différentes tailles de messages et de clés publiques.
Complexité du déchiffrement (decrypt) :

Le déchiffrement dans votre code implique de calculer la puissance modulaire d'un nombre (le texte chiffré) avec la clé privée.
La complexité de cette opération dépend principalement de la taille du texte chiffré et de la taille de la clé privée.
Vous pouvez évaluer cette complexité en mesurant le temps d'exécution de la fonction decrypt() pour différentes tailles de texte chiffré et de clés privées.
En mesurant le temps d'exécution de ces opérations pour différentes tailles de données et de clés, vous pouvez obtenir des informations sur la complexité algorithmique de votre implémentation RSA.

Gonzalo:
chatgpt, je veux un bloc de code python qui permettra de déterminer la compléxité algorithmique de tous les processus de traitement de l'algorithme RSA!

ChatGPT:
Pour mesurer la complexité algorithmique de chaque processus de traitement de l'algorithme RSA, vous pouvez utiliser le module time de Python pour mesurer le temps d'exécution de chaque opération. Voici un exemple de bloc de code Python qui mesure le temps d'exécution de la génération de clés, du chiffrement et du déchiffrement pour différentes tailles de clés et de messages :

import random
import math
import time

# Fonction pour remplir le jeu de nombres premiers
def primefiller():
    seive = [True] * 256
    seive[0] = False
    seive[1] = False
    for i in range(2, 256):
        for j in range(i * 2, 256, i):
            seive[j] = False

    prime = set()
    for i in range(len(seive)):
        if seive[i]:
            prime.add(i)
    return prime

# Fonction pour choisir un nombre premier aléatoire
def pickrandomprime(prime):
    k = random.randint(0, len(prime) - 1)
    it = iter(prime)
    for _ in range(k):
        next(it)

    ret = next(it)
    prime.remove(ret)
    return ret

# Fonction pour générer les clés publique et privée
def setkeys(prime):
    prime1 = pickrandomprime(prime)
    prime2 = pickrandomprime(prime)

    n = prime1 * prime2
    fi = (prime1 - 1) * (prime2 - 1)

    e = 2
    while True:
        if math.gcd(e, fi) == 1:
            break
        e += 1

    public_key = e

    d = 2
    while True:
        if (d * e) % fi == 1:
            break
        d += 1

    private_key = d

    return public_key, private_key, n

# Fonction pour chiffrer un message
def encrypt(message, public_key, n):
    e = public_key
    encrypted_text = 1
    while e > 0:
        encrypted_text *= message
        encrypted_text %= n
        e -= 1
    return encrypted_text

# Fonction pour déchiffrer un texte chiffré
def decrypt(encrypted_text, private_key, n):
    d = private_key
    decrypted = 1
    while d > 0:
        decrypted *= encrypted_text
        decrypted %= n
        d -= 1
    return decrypted

# Mesure de la complexité de l'opération de génération de clés
def measure_key_generation(prime):
    start_time = time.time()
    setkeys(prime)
    end_time = time.time()
    return end_time - start_time

# Mesure de la complexité de l'opération de chiffrement
def measure_encryption(message, public_key, n):
    start_time = time.time()
    encrypt(message, public_key, n)
    end_time = time.time()
    return end_time - start_time

# Mesure de la complexité de l'opération de déchiffrement
def measure_decryption(encrypted_text, private_key, n):
    start_time = time.time()
    decrypt(encrypted_text, private_key, n)
    end_time = time.time()
    return end_time - start_time

if __name__ == '__main__':
    prime = primefiller()
    public_key, private_key, n = setkeys(prime)

    # Mesure de la complexité de la génération de clés
    print("Complexité de la génération de clés:", measure_key_generation(prime), "secondes")

    # Exemple de chiffrement et de déchiffrement
    message = 123456
    encrypted_text = encrypt(message, public_key, n)
    decrypted_text = decrypt(encrypted_text, private_key, n)

    # Mesure de la complexité de l'opération de chiffrement
    print("Complexité de l'opération de chiffrement:", measure_encryption(message, public_key, n), "secondes")

    # Mesure de la complexité de l'opération de déchiffrement
    print("Complexité de l'opération de déchiffrement:", measure_decryption(encrypted_text, private_key, n), "secondes")
Ce bloc de code mesure le temps d'exécution de chaque opération importante de l'algorithme RSA et affiche les résultats. Vous pouvez ajuster les tailles des clés et des messages pour tester différentes configurations et évaluer les performances de votre implémentation.

Gonzalo:
ah ok merci de cette info. Ok on continue avec avec l'implémentation du critère de l'évaluation de la performanc de mon code python pour RSA suivant :  Gestion des grandes quantités de données.

ChatGPT:
Pour évaluer la gestion des grandes quantités de données dans votre implémentation RSA, vous pouvez générer des messages de tailles variées et mesurer le temps nécessaire pour chiffrer et déchiffrer ces messages. Voici un exemple de code Python qui illustre cela :

import random
import math
import time

# Fonction pour remplir le jeu de nombres premiers
def primefiller():
    seive = [True] * 256
    seive[0] = False
    seive[1] = False
    for i in range(2, 256):
        for j in range(i * 2, 256, i):
            seive[j] = False

    prime = set()
    for i in range(len(seive)):
        if seive[i]:
            prime.add(i)
    return prime

# Fonction pour choisir un nombre premier aléatoire
def pickrandomprime(prime):
    k = random.randint(0, len(prime) - 1)
    it = iter(prime)
    for _ in range(k):
        next(it)

    ret = next(it)
    prime.remove(ret)
    return ret

# Fonction pour générer les clés publique et privée
def setkeys(prime):
    prime1 = pickrandomprime(prime)
    prime2 = pickrandomprime(prime)

    n = prime1 * prime2
    fi = (prime1 - 1) * (prime2 - 1)

    e = 2
    while True:
        if math.gcd(e, fi) == 1:
            break
        e += 1

    public_key = e

    d = 2
    while True:
        if (d * e) % fi == 1:
            break
        d += 1

    private_key = d

    return public_key, private_key, n

# Fonction pour chiffrer un message
def encrypt(message, public_key, n):
    e = public_key
    encrypted_text = 1
    while e > 0:
        encrypted_text *= message
        encrypted_text %= n
        e -= 1
    return encrypted_text

# Fonction pour déchiffrer un texte chiffré
def decrypt(encrypted_text, private_key, n):
    d = private_key
    decrypted = 1
    while d > 0:
        decrypted *= encrypted_text
        decrypted %= n
        d -= 1
    return decrypted

# Mesure de la complexité de l'opération de chiffrement pour un message donné
def measure_encryption(message, public_key, n):
    start_time = time.time()
    encrypt(message, public_key, n)
    end_time = time.time()
    return end_time - start_time

# Mesure de la complexité de l'opération de déchiffrement pour un texte chiffré donné
def measure_decryption(encrypted_text, private_key, n):
    start_time = time.time()
    decrypt(encrypted_text, private_key, n)
    end_time = time.time()
    return end_time - start_time

if __name__ == '__main__':
    prime = primefiller()
    public_key, private_key, n = setkeys(prime)

    # Génération d'un message de taille 1024 bits
    message_1024_bits = random.getrandbits(1024)

    # Mesure de la complexité de l'opération de chiffrement pour le message de 1024 bits
    encryption_time_1024_bits = measure_encryption(message_1024_bits, public_key, n)
    print("Temps de chiffrement pour un message de 1024 bits:", encryption_time_1024_bits, "secondes")

    # Chiffrement du message de 1024 bits pour obtenir un texte chiffré
    encrypted_text_1024_bits = encrypt(message_1024_bits, public_key, n)

    # Mesure de la complexité de l'opération de déchiffrement pour le texte chiffré de 1024 bits
    decryption_time_1024_bits = measure_decryption(encrypted_text_1024_bits, private_key, n)
    print("Temps de déchiffrement pour un texte chiffré de 1024 bits:", decryption_time_1024_bits, "secondes")
Ce code mesure le temps nécessaire pour chiffrer et déchiffrer un message de 1024 bits. Vous pouvez ajuster la taille du message en fonction de vos besoins pour évaluer la gestion des grandes quantités de données dans votre implémentation RSA.

Gonzalo:
Ah ok je vais modifier ce bloc de code python pour l'adapter à plusieurs tailles de blocs de données et de clés publiques et privées.  Ok on continue avec avec l'implémentation du critère de l'évaluation de la performanc de mon code python pour RSA suivant :  Comparaison des tailles de clés.

ChatGPT:
Pour comparer les tailles des clés générées par votre implémentation RSA, vous pouvez simplement afficher la taille des clés publiques et privées une fois qu'elles sont générées. Voici comment vous pouvez le faire dans votre code :

import random
import math
import time

# Fonction pour remplir le jeu de nombres premiers
def primefiller():
    seive = [True] * 256
    seive[0] = False
    seive[1] = False
    for i in range(2, 256):
        for j in range(i * 2, 256, i):
            seive[j] = False

    prime = set()
    for i in range(len(seive)):
        if seive[i]:
            prime.add(i)
    return prime

# Fonction pour choisir un nombre premier aléatoire
def pickrandomprime(prime):
    k = random.randint(0, len(prime) - 1)
    it = iter(prime)
    for _ in range(k):
        next(it)

    ret = next(it)
    prime.remove(ret)
    return ret

# Fonction pour générer les clés publique et privée
def setkeys(prime):
    prime1 = pickrandomprime(prime)
    prime2 = pickrandomprime(prime)

    n = prime1 * prime2
    fi = (prime1 - 1) * (prime2 - 1)

    e = 2
    while True:
        if math.gcd(e, fi) == 1:
            break
        e += 1

    public_key = e

    d = 2
    while True:
        if (d * e) % fi == 1:
            break
        d += 1

    private_key = d

    return public_key, private_key, n

# Afficher la taille des clés générées
def display_key_sizes(public_key, private_key):
    public_key_size = public_key.bit_length()
    private_key_size = private_key.bit_length()

    print("Taille de la clé publique:", public_key_size, "bits")
    print("Taille de la clé privée:", private_key_size, "bits")

if __name__ == '__main__':
    prime = primefiller()
    public_key, private_key, n = setkeys(prime)

    display_key_sizes(public_key, private_key)
Ce code affiche simplement la taille des clés publiques et privées générées en utilisant la fonction bit_length() des nombres entiers en Python. Vous pouvez l'intégrer à votre programme principal pour afficher les tailles des clés chaque fois que vous générez de nouvelles clés.

Gonzalo:
Ah ok je vais modifier ce bloc de code que tu viens de me fournir, pour l'adapter à ce que je veux programmer, pour fournir des catégories de comparaison de tailles de clés, merci bien! Ok on continue avec avec l'implémentation du critère de l'évaluation de la performanc de mon code python pour RSA suivant :  Comparaison des temps d'exécution avec différentes tailles de clés.

ChatGPT:
Pour comparer les temps d'exécution avec différentes tailles de clés RSA, vous pouvez modifier votre code pour mesurer le temps nécessaire à la génération de clés de différentes tailles. Voici comment vous pouvez le faire :

import random
import math
import time

# Fonction pour remplir le jeu de nombres premiers
def primefiller():
    seive = [True] * 256
    seive[0] = False
    seive[1] = False
    for i in range(2, 256):
        for j in range(i * 2, 256, i):
            seive[j] = False

    prime = set()
    for i in range(len(seive)):
        if seive[i]:
            prime.add(i)
    return prime

# Fonction pour choisir un nombre premier aléatoire
def pickrandomprime(prime):
    k = random.randint(0, len(prime) - 1)
    it = iter(prime)
    for _ in range(k):
        next(it)

    ret = next(it)
    prime.remove(ret)
    return ret

# Fonction pour générer les clés publique et privée
def setkeys(prime):
    prime1 = pickrandomprime(prime)
    prime2 = pickrandomprime(prime)

    n = prime1 * prime2
    fi = (prime1 - 1) * (prime2 - 1)

    e = 2
    while True:
        if math.gcd(e, fi) == 1:
            break
        e += 1

    public_key = e

    d = 2
    while True:
        if (d * e) % fi == 1:
            break
        d += 1

    private_key = d

    return public_key, private_key, n

# Fonction pour mesurer le temps d'exécution de la génération de clés
def measure_key_generation_time(prime, key_sizes):
    times = {}
    for key_size in key_sizes:
        start_time = time.time()
        setkeys(prime)
        end_time = time.time()
        times[key_size] = end_time - start_time
    return times

if __name__ == '__main__':
    prime = primefiller()
    key_sizes = [64, 128, 256, 512, 1024, 2048]  # Tailles des clés à tester
    times = measure_key_generation_time(prime, key_sizes)

    print("Temps d'exécution pour la génération de clés (en secondes):")
    for key_size, time_taken in times.items():
        print(f"Taille de la clé {key_size} bits:", time_taken, "secondes")
Ce code mesure le temps nécessaire pour générer des clés de différentes tailles (64, 128, 256, 512, 1024 et 2048 bits) et affiche les résultats. Vous pouvez le modifier selon vos besoins pour inclure d'autres tailles de clés si nécessaire.

Gonzalo:
Ah ok merci de m'avoir fourni ce code python, je vais le modifier selon les spécifications de la taille des clés publiques et privées normallement urilisés (standards) en cryptographie en 2024.  Ok on continue avec avec l'implémentation du critère de l'évaluation de la performanc de mon code python pour RSA suivant :  Comparaison de la taille des messages clairs utilisés, pour bien sécuriser les messages cryptés.

ChatGPT:
Pour comparer la taille des messages clairs utilisés dans le chiffrement RSA, vous pouvez écrire une fonction qui mesure la taille des messages clairs avant et après le chiffrement. Voici comment vous pouvez le faire :

import random
import math

# Fonction pour remplir le jeu de nombres premiers
def primefiller():
    seive = [True] * 256
    seive[0] = False
    seive[1] = False
    for i in range(2, 256):
        for j in range(i * 2, 256, i):
            seive[j] = False

    prime = set()
    for i in range(len(seive)):
        if seive[i]:
            prime.add(i)
    return prime

# Fonction pour choisir un nombre premier aléatoire
def pickrandomprime(prime):
    k = random.randint(0, len(prime) - 1)
    it = iter(prime)
    for _ in range(k):
        next(it)

    ret = next(it)
    prime.remove(ret)
    return ret

# Fonction pour générer les clés publique et privée
def setkeys(prime):
    prime1 = pickrandomprime(prime)
    prime2 = pickrandomprime(prime)

    n = prime1 * prime2
    fi = (prime1 - 1) * (prime2 - 1)

    e = 2
    while True:
        if math.gcd(e, fi) == 1:
            break
        e += 1

    public_key = e

    d = 2
    while True:
        if (d * e) % fi == 1:
            break
        d += 1

    private_key = d

    return public_key, private_key, n

# Fonction pour chiffrer un message
def encrypt(message, public_key, n):
    encrypted_text = pow(message, public_key, n)
    return encrypted_text

# Fonction pour déchiffrer un message
def decrypt(encrypted_text, private_key, n):
    decrypted = pow(encrypted_text, private_key, n)
    return decrypted

# Fonction pour mesurer la taille des messages
def measure_message_size(message):
    return len(message)

if __name__ == '__main__':
    prime = primefiller()
    public_key, private_key, n = setkeys(prime)

    # Message à chiffrer
    message = "Test message for RSA encryption."

    # Mesurer la taille du message clair
    original_message_size = measure_message_size(message)

    # Chiffrer le message
    encrypted_text = encrypt(int.from_bytes(message.encode(), 'big'), public_key, n)

    # Mesurer la taille du message chiffré
    encrypted_message_size = encrypted_text.bit_length() // 8 + 1

    print("Taille du message clair:", original_message_size, "octets")
    print("Taille du message chiffré:", encrypted_message_size, "octets")
Ce code mesure la taille du message clair et la taille du message chiffré après le chiffrement RSA. Vous pouvez l'utiliser pour comparer la taille des messages clairs et chiffrés pour évaluer l'efficacité de votre algorithme RSA.

Version améliorée de ce main implémentant le critère d'évaluation nommé "Comparaison de la taille des messages clairs utilisés, pour bien sécuriser les messages cryptés":

if __name__ == '__main__':
    prime = primefiller()
    public_key, private_key, n = setkeys(prime)

    # Messages clairs à utiliser
    messages_clairs = [
        "La vida es un constante viaje lleno de aventuras y sorpresas. Disfruta cada momento y sigue adelante con valentía y conviccion.",
        "La felicidad es un estado del alma que se alimenta de momentos de gratitud y amor. Es encontrar belleza en lo simple, apreciar lo que tenemos y ser conscientes de lo que nos rodea. En cada sonrisa, en cada beso, en cada alba, la felicidad se hace presente.",
        "In football, the best players that highten the most that sport are the players who have the best mentality and attitude, either when they play football in the pitch, either they are outside the pitch, and they always will show the best attitude and mentality to overcome all the obstacles they may encounter in real life and when playing football. Those players are also good parents.",
        "In football, players who honour the sport possess exceptional mental fortitude and a winning mindset. Whether on the field or off, they show out resilience and determination to excel and overcome challenges. Moreover, those players excel as parents, setting positive examples. They embody the true spirit of the game, inspiring other people with dedication, leadership, and passion. Their influence extends beyond the field, shaping the culture and instilling values of teamwork, perseverance, and sportsmanship.",
        "Dans le domaine de la médecine, les professionnels de la santé qui dédient toute leur vie au bien-être des autres possèdent un dévouement exceptionnel et une expertise sans pareille. Que ce soit dans les hôpitaux, les cliniques ou sur le terrain, ils font preuve de compassion et de compétence pour soigner les malades et sauver des vies. De plus, ces héros de la santé inspirent la confiance et l'espoir, guidant les patients avec empathie et détermination. Leur impact transcende les frontières de la maladie, apportant guérison et réconfort à ceux qui en ont le plus besoin. Ces médecins, infirmières et professionnels de la santé consacrent leur temps et leur énergie à améliorer la qualité de vie des autres, faisant preuve d'un altruisme admirable et d'un engagement indéfectible envers le bien-être de la société. Leur travail incessant et leur dévouement total sont une source d'inspiration pour tous ceux qui les entourent.",
        "Dans le domaine de la médecine, les professionnels de la santé qui dédient toute leur vie au bien-être des autres possèdent un dévouement exceptionnel et une expertise sans pareille. Que ce soit dans les hôpitaux, les cliniques ou sur le terrain, ils font preuve de compassion et de compétence pour soigner les malades et sauver des vies. De plus, ces héros de la santé inspirent la confiance et l'espoir, guidant les patients avec empathie et détermination. Leur impact transcende les frontières de la maladie, apportant guérison et réconfort à ceux qui en ont le plus besoin. Ces médecins, infirmières et professionnels de la santé consacrent leur temps et leur énergie à améliorer la qualité de vie des autres, faisant preuve d'un altruisme admirable et d'un engagement indéfectible envers le bien-être de la société. Leur travail constant et leur dévouement intense sont une source d'inspiration pour tous ceux qui les entourent.",
        "Les défis auxquels l'humanité est confrontée aujourd'hui sont nombreux et complexes. Du changement climatique à la pauvreté mondiale, en passant par les inégalités sociales et la montée du terrorisme, notre monde est confronté à des problèmes urgents qui nécessitent une action immédiate et accordée. Pour surmonter ces défis, il est essentiel que nous travaillions ensemble, en tant que population mondiale, pour trouver des solutions durables. Cela nécessite un engagement ferme en faveur de la coopération internationale, ainsi que des politiques et des actions concrètes pour promouvoir le développement durable, l'égalité et la paix. En unissant nos forces et en mettant en commun nos ressources, l'humanité peut créer un avenir meilleur pour tous, où chaque individu a la chance de réaliser son plein potentiel et de vivre dans un monde sûr, juste et prospère. Cependant, afin que les nations du monde deviennent riches et prospères, on doit éliminer, pour de vrai, la pauvrété mondiale."
    ]

    for message in messages_clairs:
        print("Message clair:", message)
        # Mesurer la taille du message clair
        original_message_size = measure_message_size(message)
        print("Taille du message clair:", original_message_size, "octets")

        # Chiffrer le message
        encrypted_text = encrypt(int.from_bytes(message.encode(), 'big'), public_key, n)

        # Mesurer la taille du message chiffré
        encrypted_message_size = encrypted_text.bit_length() // 8 + 1
        print("Taille du message chiffré:", encrypted_message_size, "octets")

        # Déchiffrer le message
        decrypted_text = decrypt(encrypted_text, private_key, n)
        
        # Mesurer la taille du message déchiffré
        decrypted_message_size = measure_message_size(decrypted_text.to_bytes((decrypted_text.bit_length() + 7) // 8, 'big'))
        print("Taille du message déchiffré:", decrypted_message_size, "octets")
        print()

        print("Taille du message clair:", original_message_size, "octets")
        print("Taille du message chiffré:", encrypted_message_size, "octets")
        print("Taille du message déchiffré:", decrypted_message_size, "octets")
  

