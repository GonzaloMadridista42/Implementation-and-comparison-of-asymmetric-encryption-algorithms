if user_reponse == "a":
   def generate_prime(length=128):
       # Bit length calculated in terms of number of bits that has the message
       desired_bit_length = length * 8
    
       # Divide by 4 to get the bit length for each component (e, n) or (d, n)
       bit_length = desired_bit_length // 4
    
       p = 4
       while not is_prime(p):
          p = generate_prime_candidate(bit_length)
       return p
elif user_reponse == "b":
     def generate_prime(length=256):
       # Bit length calculated in terms of number of bits that has the message
       desired_bit_length = length * 8
    
       # Divide by 4 to get the bit length for each component (e, n) or (d, n)
       bit_length = desired_bit_length // 4
    
       p = 4
       while not is_prime(p):
          p = generate_prime_candidate(bit_length)
       return p
elif user_reponse == "c":
     def generate_prime(length=384):
       # Bit length calculated in terms of number of bits that has the message
       desired_bit_length = length * 8
    
       # Divide by 4 to get the bit length for each component (e, n) or (d, n)
       bit_length = desired_bit_length // 4
    
       p = 4
       while not is_prime(p):
          p = generate_prime_candidate(bit_length)
       return p
elif user_reponse == "d":
     def generate_prime(length=512):
       # Bit length calculated in terms of number of bits that has the message
       desired_bit_length = length * 8
    
       # Divide by 4 to get the bit length for each component (e, n) or (d, n)
       bit_length = desired_bit_length // 4
    
       p = 4
       while not is_prime(p):
          p = generate_prime_candidate(bit_length)
       return p
elif user_reponse == "e":
     def generate_prime(length=960):
       # Bit length calculated in terms of number of bits that has the message
       desired_bit_length = length * 8
    
       # Divide by 4 to get the bit length for each component (e, n) or (d, n)
       bit_length = desired_bit_length // 4
    
       p = 4
       while not is_prime(p):
          p = generate_prime_candidate(bit_length)
       return p
elif user_reponse == "f":
     def generate_prime(length=1024):
       # Bit length calculated in terms of number of bits that has the message
       desired_bit_length = length * 8
    
       # Divide by 4 to get the bit length for each component (e, n) or (d, n)
       bit_length = desired_bit_length // 4
    
       p = 4
       while not is_prime(p):
          p = generate_prime_candidate(bit_length)
       return p

